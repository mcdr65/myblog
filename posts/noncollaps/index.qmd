---
title: "Noncollapsibility of the odds ratio"
date: "2023-12-02"
description: "IPW-analysis"
categories: [code, analysis]
---




# Noncollapsibility


Assume having a binary outcome $Y$ and a treatment indicator $X$ denoting if patient was randomised to treatment ($X=1$) or control ($X=0$). The analysis would be to fit a simple **logistic regression model**

$$
P(Y=1|X)=\text{expit}(\alpha_0+\alpha_1X),
$$

with $\text{expit}(\alpha_0+\alpha_1X)=\frac{\exp(\alpha_0+\alpha_1X)}{1+\exp(\alpha_0+\alpha_1X)}$.

Often, we write the model with the linear predictor, that is, the logit transformed expectation,

$$
\boxed{\text{logit}P(Y=1|X)=\alpha_0+{\color{red}\alpha_1}X}.
$$
 

Of course, there will be other factors that influence the probability that $Y=1$. Assume another variable $C$ which influences the probability that $Y=1$. The conditional model would be

$$
\boxed{\text{logit}P(Y=1|X,C)=\beta_0+{\color{red}\beta_1}X+\beta_2C}.
$$

Now, under randomisation, $C$ and $X$ are (population) independent -- that is -- there is no confounding of the effect of $X$ on $Y$ by $C$ in place. 

Though $C$ is not a confounder, in general, ${\color{red}\alpha_1 \neq \beta_1}$. The parameters (log odds ratios) in the marginal and conditional model are **different**. The proof is based on **William's Tower rule** for conditional expectations:


$$
\begin{align}
E(Y|X)=&E(E(Y|X,C)|X)\\
=&E(\text{expit}(\beta_0+\beta_1X+\beta_2C)|X)\\
\neq &\text{expit}(\beta_0+\beta_1X+\beta_2E(C|X))
\end{align}
$$


<!-- $$ -->
<!-- \begin{align} -->
<!-- E(Y_x=1)=&E_C(Y_x=1|C)\\ -->
<!-- =&E_C(\text{expit}(\beta_0+\beta_1X+\beta_2C))\\ -->
<!-- \neq &\text{expit}(\beta_0+\beta_1X+\beta_2E(C)) -->
<!-- \end{align} -->
<!-- $$ -->


With **other link functions** (in log-linear models) and identity (in linear models)), however, the two quantities are **equal**. 


# Example

We simulate data from logistic GLM with **non-confounding** covariate $C$:


```{r }
set.seed(3)
N <- 400
C <- sort(runif(N,-8,8)) #non-confounding C
X<-sample(c(0,1),N,replace=TRUE)
beta0<-0
beta1<-log(10)
beta2<-1
##Logistic 
etai<-beta0+beta1*X+beta2*C
pii<-exp(etai)/(1+exp(etai))
Ydich <-rbinom(X,size=1,prob=pii)
dat<-data.frame(C,X,Ydich)
```

```{r }
psych::headTail(dat)
```



```{r }
modC<-glm(Ydich~X+C,data=dat,family="binomial")
modM<-glm(Ydich~X,data=dat,family="binomial")
```

## Marginal model

```{r }
equatiomatic::extract_eq(modM)
```
## Conditional model

```{r }
equatiomatic::extract_eq(modC)
```



## Illustrate non-collapsibility

```{r fig.cap="Log odds ratio for group is larger when we adjust for $C$ (Differences in logits  between solid lines relative to distance between dashed lines)"}
pred<-predict(modM,type="response",se.fit=TRUE)
predgA<-predict(modC,newdata=data.frame(C=C[X==0],X=0),se.fit=TRUE,type="response")
predgB<-predict(modC,newdata=data.frame(C=C[X==1],X=1),se.fit=TRUE,type="response")
plot(C,Ydich,col=c("blue","red")[X+1],ylab="Probability")
lines(sort(C[X==0]),sort(predgA$fit),col="blue")
lines(sort(C[X==1]),sort(predgB$fit),col="red")
abline(a=mean(pii[X==0]),b=0,col="blue",lty=2)
abline(a=mean(pii[X==1]),b=0,col="red",lty=2)
```

## Marginal model



```{r }
summary(modM)$coef
```

## Conditional model

Effect of $X$ is larger, even though $C$ is not a confounder. This is due to **non-collapsibility of the odds ratio**


```{r }
summary(modC)$coef
```


## IPW-model

Estimate inverse probability weights to fit marginal structural
     models in a point treatment situation. 


### Weights


```{r }
library(ipw)
temp <- ipwpoint(exposure=X,family = "binomial",link = "logit",data=dat,numerator =~1,denominator = ~ C)
summary(temp$ipw.weights)
dat$sw<-temp$ipw.weights
```

### Marginal structural model

Marginal structural model for the causal effect of $X$ on $Y$ corrected for confounding by $C$ using inverse probability weighting

```{r }
modW<-glm(Ydich~X,weights=sw,data=dat,family=quasibinomial)
summary(modW)$coef
```


```{r }
require("survey")
msm <- (svyglm(Ydich ~ X, family="binomial",design = svydesign(~ 1, weights =~sw,data = dat)))
summary(msm)
```


## Comparison


```{r }
modelsummary::modelsummary(models=list("marginal"=modM,"conditional"=modC,"IPW"=modW))
```

::: {.callout-important}
* conditional-marginal=noncollaps+confouding
* IPW-marginal=confounding
* conditional-IPW=noncollaps
:::




# Smoking and children weight

```{r echo=FALSE}
library(rio)
bwt <- import("bwt_full.csv")
#bwt$low <- factor(bwt$low, levels = c(0,1), labels = c("no", "yes"))
#bwt$smoke <- factor(bwt$smoke, levels = c(0,1), labels = c("no", "yes"))
bwt$socclass <- factor(bwt$socclass, levels = c("I", "II", "III"), labels = c("I", "II", "III"))
```
```{r }
str(bwt)
```

```{r }
glm_smoke <- glm(low ~ smoke, data = bwt, family = binomial)
summary(glm_smoke)$coef
glm_multi_1 <- glm(low ~ smoke + socclass, data = bwt, family = binomial)
summary(glm_multi_1)$coef
```


```{r }
temp <- ipwpoint(exposure=smoke,family = "binomial",link = "logit",data=bwt,
                 numerator=~1,denominator=~socclass)
summary(temp$ipw.weights)
bwt$sw<-temp$ipw.weights
```

```{r }
modW<-glm(low~smoke,weights=sw,data=bwt,family=quasibinomial)
summary(modW)$coef
```


::: {.callout-important}
* conditional-marginal=noncollaps+confouding
* IPW-marginal=confounding
* conditional-IPW=noncollaps
:::


```{r }
modelsummary::modelsummary(models=list("marginal"=glm_smoke,"conditional"=glm_multi_1,"IPW"=modW))
```


# The view of potential outcomes

<!-- See [Example](https://www.r-bloggers.com/2017/12/when-you-use-inverse-probability-weighting-for-estimation-what-are-the-weights-actually-doing/) for marginal structural models in this context. -->

## Simulate some data

```{r }
library(simstudy)
# define the data
defB <- defData(varname = "C", formula =0.27, 
                dist = "binary")
defB <- defData(defB, varname = "Y0", formula = "-2.5 + 1.75*C", 
                dist = "binary", link = "logit")
defB <- defData(defB, varname = "Y1", formula = "-1.5 + 1.75*C", 
                dist = "binary", link = "logit")
defB <- defData(defB, varname = "X", formula = "0.315 + 0.352 *C", 
                dist = "binary")
defB <- defData(defB, varname = "Y", formula = "Y0 + X * (Y1 - Y0)", 
                dist = "nonrandom")
defB
```

```{r }
set.seed(2002)
Nnew<-1000
dtB <- genData(Nnew, defB)
dtB
```

## True causal effect (based on potential outcomes)


```{r }
odds <- function (p) {
    return((p/(1 - p)))
}

dtB[, log( odds( mean(Y1) ) / odds( mean(Y0) ) )]
```

## Conditional effect

The true conditional causal effect of $A$ is 1.

```{r }
mc<-glm(Y ~ X + C , data = dtB, family="binomial")
mc
```
This estimate for $X$ is a good estimate of the conditional effect in the population, based on the potential outcomes at each level of $C$

```{r }
dtB[, .(LOR = log( odds( mean(Y1) ) / odds( mean(Y0) ) ) ), keyby = C]
```

## Marginal effect

The marginal estimate is biased both for the conditional effect and the marginal causal effect.

```{r }
mm<-glm(Y ~ X , data = dtB, family="binomial")
mm
```


## Numerator and Denominator model

```{r }
numModel <- glm(X ~ 1, data = dtB, family = "binomial")
denModel <- glm(X ~ C, data = dtB, family = "binomial")
```

## Stabilized weights by hand

```{r }
dtB[, pX0 := predict(numModel, type = "response")]
dtB[, pX := predict(denModel, type = "response")]
defB2 <- defDataAdd(varname = "IPW", 
                    formula = "(X*pX0+(1-X)*(1-pX0))/((X * pX) + ((1 - X) * (1 - pX)))", 
                    dist = "nonrandom")
dtB <- addColumns(defB2, dtB)
dtB[1:6]
```

```{r }
unique(dtB$IPW)
```

## Stabilized weights with **ipw** package

```{r }
tempsw<-ipw::ipwpoint(exposure=X,family="binomial",link="logit",numerator=~1,denominator = ~C,data=dtB)
tempw<-ipw::ipwpoint(exposure=X,family="binomial",link="logit",denominator = ~C,data=dtB)
unique(tempsw$ipw.weights)
mean(tempsw$ipw.weights)
unique(tempw$ipw.weights)
mean(tempw$ipw.weights)
```


## Applying IPW 

### Unstabilized weights

```{r }
summary(mw<-glm(Y ~ X , data = dtB, family="binomial", weights = tempw$ipw.weights))$coef
```

### Stabilized weights

```{r }
summary(mws<-glm(Y ~ X , data = dtB, family="binomial", weights = tempsw$ipw.weights))$coef
```
## Comparison

```{r }
modelsummary::modelsummary(models=list("marginal"=mm,"conditional"=mc,"IPW"=mw,"IPWs"=mws))
```


```{r EffSampleSize, include=FALSE}
Nnew
w<-tempw$ipw.weights
sw<-tempsw$ipw.weights
sum(w)
sum(sw)
sum(w)^2/sum(w^2)
sum(sw)^2/sum(sw^2)
Nnew/(1+var(w))
Nnew/(1+var(sw))
```










